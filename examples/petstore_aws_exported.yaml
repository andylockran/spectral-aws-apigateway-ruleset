openapi: "3.0.1"
info:
  title: "AWS APi Gateway Petstore"
  description: "An example API Gateway for AWS API Gateway"
  version: "1.0.0"
  contact: 
    email: andy@zrmt.com
servers:
- url: "https://yvvkgdb65j.execute-api.eu-west-2.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "/default"
paths:
  /pets:
    get:
      operationId: "listPets"
      parameters:
      - name: "limit"
        in: "query"
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
      x-amazon-apigateway-request-validator: "all"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
    post:
      operationId: "createPets"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "404":
          description: "404 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "201":
          description: "201 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfError"
        "400":
          description: "400 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: "401 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: "403 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-amazon-apigateway-request-validator: "all"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
  /pets/{petId}:
    get:
      operationId: "showPetById"
      parameters:
      - name: "petId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
      x-amazon-apigateway-request-validator: "all"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseTemplates:
              application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "never"
components:
  schemas:
    Pets:
      type: "array"
      items:
        $ref: "#/components/schemas/Pet"
    ArrayOfError:
      type: "array"
      additionalProperties: true
      items:
        $ref: "#/components/schemas/Error"
    Error:
      required:
      - "code"
      - "message"
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        message:
          type: "string"
    Pet:
      required:
      - "id"
      - "name"
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        tag:
          type: "string"
      additionalProperties: false
x-amazon-apigateway-request-validators:
  all:
    validateRequestParameters: true
    validateRequestBody: true
